<?php
/**
 * MarkupSEO
 * The all-in-one SEO solution for ProcessWire.
 *
 * By Nico Knoll (http://nico.is/)
 *
 */

class MarkupSEO extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => __('SEO'),
			'version' => '0.3.0',
			'summary' => __('The all-in-one SEO solution for ProcessWire.'),
			'autoload' => true
		);
	}
	
	private $prefix = 'SEO_';


	/**
	 * Default configuration
	 *
	 */
	static public function getDefaultConfig() {
		return array(
			'sitename' => '', 
			'title' => '', 
			'titleSmart' => '', 
			'keywords' => '', 
			'keywordsSmart' => '', 
			'description' => '', 
			'descriptionSmart' => '', 
			'image' => '', 
			'imageSmart' => '', 
			'canonical' => '', 
			'robots' => '', 
			'custom' => '',
			'includeGenerator' => 1,
			'includeOpenGraph' => 1,
			'useParents' => 0,
			'method' => 'auto',
			'excludedTemplates' => 'admin',
			'usePermission' => 0,
			'googleAnalytics' => ''
		);
	}


	/**
	 * Populate default configuration (will be overwritten after constructor with user's own configuration)
	 *
	 */
	public function __construct() {
		foreach(self::getDefaultConfig() as $key => $value) {
			$this->$key = $value;
		}
	}


   	/**
	 * Initializing the hooks
	 *
	 */
	 public function init() {
		 // frontend hooks
		 $this->addHookAfter("ProcessPageView::execute", $this, 'hookMethodAuto');
	 }
	 
	public function ready() {
		// backend hooks
		$editedPage = wire('pages')->get($this->config->input->get->id);
		if(@$this->page->process == 'ProcessPageEdit' && !in_array((string)$editedPage->template, $this->excludedTemplates)) {
			$this->addHookAfter("ProcessPageEdit::buildFormContent", $this, 'addSEOTab');
			$this->addHookBefore("ProcessPageEdit::execute", $this, 'saveSEOTab');
		}
		
		// frontend hooks
		
		if($this->method == 'auto' && $this->page->template != 'admin') {
			$this->addHookProperty("Page::seo", $this, 'hookFrontendPage');
			$this->addHookProperty("Config::seo", $this, 'hookFrontendConfig');
		}
	}
	
	
	public function hookMethodAuto(HookEvent $event) {
		if(!($this->method == 'auto' && $this->page->template != 'admin')) return;
		
		$dataRendered = $this->page->seo->render;
		$event->return = str_ireplace("</head>", $dataRendered.'</head>', $event->return); 
	}
	

   	/**
	 * Adds a new tab called "SEO" to pages
	 *
	 */
	public function addSEOTab(HookEvent $e) {
		// load data
		$page = wire('pages')->get($this->config->input->get->id);
		$pageData = $this->getPageSEO($page->id);
		$configData = wire('modules')->getModuleConfigData($this);
		$mixedData = array_merge(array_filter((array)$configData), array_filter((array)$pageData));
		
		$this->modules->get('FieldtypeFieldsetTabOpen');
		$field = new InputfieldFieldsetTabOpen;
		$field->name = $this->prefix."meta";
		$field->label = $this->_('SEO');
		
		$e->return->add($field);
		
		
		// title, keywords, description, image, canonical, robots, custom
		
		$field = $this->modules->get("InputfieldMarkup");
		$field->label = $this->_("Google Preview");
		$field->description = $this->_('Will be updated after save.');
		$field->value = $this->getGooglePreview($pageData['title'], $page->httpUrl, $pageData['description']);
		
		$e->return->add($field);
		
		$field = $this->modules->get("InputfieldText");
		$field->name = $this->prefix."title";
		$field->label = $this->_("Title");
		$field->description = "A good length for a title is 60 characters.";
		$field->value = $pageData['title'];

		$e->return->add($field);
		
		
		$field = $this->modules->get("InputfieldText");
		$field->name = $this->prefix."keywords";
		$field->label = $this->_("Keywords");
		$field->description = "";
		$field->value = $pageData['keywords'];
		
		$e->return->add($field);
		
		
		$field = $this->modules->get("InputfieldText");
		$field->name = $this->prefix."description";
		$field->label = $this->_("Description");
		$field->description = "A good length for a description is 160 characters.";
		$field->value = $pageData['description'];
		
		$e->return->add($field);
		
		
		$field = $this->modules->get("InputfieldText");
		$field->name = $this->prefix."image";
		$field->label = $this->_("Image");
		$field->description = $this->_("Please enter the url to a preview image.");
		$field->value = $pageData['image'];
		
		$e->return->add($field);
		
		
		$field = $this->modules->get("InputfieldText");
		$field->name = $this->prefix."canonical";
		$field->label = $this->_("Canonical Link");
		$field->description = "";
		$field->value = $pageData['canonical'];
		
		$e->return->add($field);
		
		
		$field = $this->modules->get("InputfieldTextarea");
		$field->name = $this->prefix."custom";
		$field->label = $this->_("Custom");
		$field->description = $this->_("If you need additional Meta tags just add them here.");
		$field->value = $pageData['custom'];
		
		$e->return->add($field);
		
		
		$this->modules->get('FieldtypeFieldsetClose');
		$field = new InputfieldFieldsetClose;
		$field->name = $this->prefix."meta_END";
		
		$e->return->add($field);
	}

	/**
	 * Because the fields are not real fields they need to be saved in another way
	 *
	 */
	public function saveSEOTab(HookEvent $e) {
		if(!count($_POST)) return;
		
		$post = $this->config->input->post;
		$pageSEOData = array(
			 'title' => $post->{$this->prefix.'title'}, 
			 'keywords' => $post->{$this->prefix.'keywords'}, 
			 'description' => $post->{$this->prefix.'description'}, 
			 'image' => $post->{$this->prefix.'image'}, 
			 'canonical' => $post->{$this->prefix.'canonical'}, 
			 'robots' => $post->{$this->prefix.'robots'}, 
			 'custom' => $post->{$this->prefix.'custom'}
		);

		// TODO: find a better way to get the id
		$this->savePageSEO($this->config->input->get->id, $pageSEOData);
	}
	
	/**
	 * Saves the data for one page
	 *
	 */
	private function savePageSEO($id, $data) {
		$moduleData = wire('modules')->getModuleConfigData($this);
		
		$moduleData['pages'][$id] = $data;
		
		wire('modules')->saveModuleConfigData($this, $moduleData);
		
	}
	
	/**
	 * Loads and returns the data for one page
	 *
	 */
	private function getPageSEO($id) {
		$dataOrg = wire('modules')->getModuleConfigData($this);

		if (isset($dataOrg['pages']) && isset($dataOrg['pages'][$id])) {
		      return $dataOrg['pages'][$id];
	   	} else {
		       return array(
		               'title' => '',
		               'keywords' => '',
		               'description' => '',
		               'image' => '',
		               'canonical' => '',
		               'robots' => '',
		               'custom' => '',
		       );
	   	}
	}
	
	/**
	 * Generates a google styled preview for the SEO Tab
	 *
	 */
	private function getGooglePreview($title, $url, $description) {
		$html  = '<div class="SEO_google_wrapper"><span class="SEO_google_title">'.($title ? $title : 'Title').'</span>';
		$html .= '<span class="SEO_google_link">'.($url ? $url : 'URL').'</span>';
		$html .= '<span class="SEO_google_description">'.($description ? substr($description, 0, 155) : 'Description').'.</span></div>';
		$html .= '<style>
					.SEO_google_wrapper {
						float:left;
						margin:10px 0px;
						width:512px;
					}
					
					.SEO_google_title {
						color: #1a0dab;
						clear:both;
						width:auto;
						float:left;
						font-family: arial,sans-serif;
						font-size: 16px;
					}
					
					.SEO_google_title:hover {
						text-decoration:underline;
						cursor:pointer;
					}
					
					.SEO_google_link {
						height: 17px;
						line-height: 16px;
						color: #006621;
						font-style: normal;
						font-size:13px;
						clear:both;
						float:left;
						font-family: arial,sans-serif;
					}
					
					.SEO_google_description {
						line-height: 16px;
						color: #545454;
						font-style: normal;
						font-size:13px;
						clear:both;
						float:left;
						font-family: arial,sans-serif;
					}
		</style>';
		
		return $html;
	}
	
	
	
	
	/* ---- FRONTEND ---- */
	
	
	
	/**
	 * Returns an object including all the data (mixed config and page)
	 *
	 */
	public function hookFrontendPage(HookEvent $event) {
		$pageDataDefault = $this->getPageSEO($this->page->id);
		$configData = wire('modules')->getModuleConfigData($this);
		unset($configData['pages'], $configData['excludedTemplates'], $configData['useParents'], $configData['usePermission'], $configData['method']);
		$mixedData = array_merge((array)$configData, (array)$pageDataDefault);
		

		// use configuration and/or smart values
		if($this->titleSmart && $pageDataDefault['title'] == '' && $this->page->get(implode('|', $this->titleSmart)) != '') $mixedData['title'] = $this->page->get(implode('|', $this->titleSmart));
		if($mixedData['title'] == '' && $this->useParents && $this->page->id != '1') $mixedData['title'] = $this->getParentValue($this->page, 'title');
		
		if($this->keywordsSmart && $pageDataDefault['keywords'] == '' && $this->page->get(implode('|', $this->keywordsSmart)) != '') $mixedData['keywords'] = $this->page->get(implode('|', $this->keywordsSmart));
		if($mixedData['keywords'] == '' && $this->useParents && $this->page->id != '1') $mixedData['keywords'] = $this->getParentValue($this->page, 'keywords');
		
		if($this->descriptionSmart && $pageDataDefault['description'] == '' && $this->page->get(implode('|', $this->descriptionSmart)) != '') $mixedData['description'] = $this->page->get(implode('|', $this->descriptionSmart));
		if($mixedData['description'] == '' && $this->useParents && $this->page->id != '1') $mixedData['description'] = $this->getParentValue($this->page, 'description');

		if($this->imageSmart && $pageDataDefault['image'] == '' && @$this->page->get(implode('|', $this->imageSmart))->first()->url != '') $mixedData['image'] = $this->page->get(implode('|', $this->imageSmart))->first()->url;

		unset($mixedData['titleSmart'], $mixedData['keywordsSmart'], $mixedData['descriptionSmart'], $mixedData['imageSmart']);
		

		
		// add generator
		if($mixedData['includeGenerator']) $mixedData['generator'] = 'ProcessWire '.$this->config->version;
		unset($mixedData['includeGenerator']);
		
		// add opengraph
		if($configData['includeOpenGraph']) {
			$mixedData['og:site_name'] = @$mixedData['sitename'];
			$mixedData['og:title'] = @$mixedData['title'];
			$mixedData['og:url'] = ((@$mixedData['canonical']) ? $mixedData['canonical'] : $this->page->httpUrl);
			$mixedData['og:description'] = @$mixedData['description'];
			$mixedData['og:type'] = @$mixedData['website'];
			$mixedData['og:image'] = @$mixedData['image'];
		}
		unset($mixedData['includeOpenGraph'], $mixedData['sitename']);
		
		
		// add google analytics
		$googleAnalytics = '';
		if($mixedData['googleAnalytics']) {
		$googleAnalytics = "
<!-- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', '".$mixedData['googleAnalytics']."', 'auto');
  ga('send', 'pageview');

</script>
<!-- End: Google Analytics -->";
		}
		unset($mixedData['googleAnalytics']);
		
		
		
		// add "render"
		$rendered = '';
		foreach(array_filter($mixedData) as $name => $content) {
			if($name == 'robots') $content = implode(', ', $content);
			$rendered .= '<meta name="'.$name.'" content="'.$content.'">'."\n\r";
		}
		
		$mixedData['render'] = $rendered.((@$mixedData['custom']) ? $mixedData['custom'] : '').$googleAnalytics."\n\r";
		
		$event->return = (object)$mixedData;
	}
	
	
	
	private function getParentValue($page, $what = '') {
		if($page->id == 1) return;
		$parent = $page->parent();
		$data = $this->getPageSEO($parent->id);
		if($data[$what] != '') return $data[$what];
		return $this->getParentValue($parent, $what);
	}
	
	
	
	
	/**
	 * Returns an object including all the data (only config/defaults)
	 *
	 */
	public function hookFrontendConfig(HookEvent $event) {
		$moduleData = wire('modules')->getModuleConfigData($this);
		unset($moduleData['pages']);
		
		$event->return = (object)$moduleData;
	}
	
	


	/**
	 * Create the modules setting page
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$prefix = 'SEO_';

		// this is a container for fields, basically like a fieldset
		$fields = new InputfieldWrapper();

		// since this is a static function, we can't use $this->modules, so get them from the global wire() function
		$modules = wire('modules');
		$selectFields = wire('fields');

		// merge default config settings (custom values overwrite defaults)
		$defaults = self::getDefaultConfig();
		$data = array_merge($defaults, $data);

		
		$field = $modules->get("InputfieldText");
		$field->name = "sitename";
		$field->label = __("Site Name");
		$field->description = "";
		$field->value = $data['sitename'];
		$fields->add($field);
		
		
		$field = $modules->get("InputfieldText");
		$field->name = "title";
		$field->label = __("Title");
		$field->description = "A good length for a title is 60 characters.";
		$field->value = $data['title'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "titleSmart";
		$field->label = __("Smart Title");
		$field->description = "We will use those fields (in this particular order) if you don't fill in the title field";
		foreach($selectFields as $selectField) $field->addOption($selectField->name);
		$field->value = $data['titleSmart'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		
		$field = $modules->get("InputfieldText");
		$field->name = "keywords";
		$field->label = __("Keywords");
		$field->description = "";
		$field->value = $data['keywords'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "keywordsSmart";
		$field->label = __("Smart Keywords");
		$field->description = "We will use those fields (in this particular order) if you don't fill in the keywords field";
		foreach($selectFields as $selectField) $field->addOption($selectField->name);
		$field->value = $data['keywordsSmart'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		
		$field = $modules->get("InputfieldText");
		$field->name = "description";
		$field->label = __("Description");
		$field->description = "A good length for a description is 160 characters.";
		$field->value = $data['description'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "descriptionSmart";
		$field->label = __("Smart Description");
		$field->description = "We will use those fields (in this particular order) if you don't fill in the description field";
		foreach($selectFields as $selectField) $field->addOption($selectField->name);
		$field->value = $data['descriptionSmart'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		
		$field = $modules->get("InputfieldText");
		$field->name = "image";
		$field->label = __("Image");
		$field->description = "";
		$field->value = $data['image'];
		$field->columnWidth = '50%';
		$fields->add($field);
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "imageSmart";
		$field->label = __("Smart Image");
		$field->description = "We will use the first image from the specified image field.";
		foreach($selectFields->find('type=FieldtypeImage') as $selectField) $field->addOption($selectField->name);
		$field->value = $data['imageSmart'];
		$field->columnWidth = '50%';
		$fields->add($field);
		

		
		$field = $modules->get("InputfieldTextarea");
		$field->name = "custom";
		$field->label = __("Custom");
		$field->description = "";
		$field->value = $data['custom'];
		$fields->add($field);
		
		
		
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "robots";
		$field->label = __("Robots");
		$field->description = "";
		$field->addOption('index');
		$field->addOption('follow');
		$field->addOption('archive');
		$field->addOption('noindex');
		$field->addOption('nofollow');
		$field->addOption('noarchive');
		$field->addOption('nosnippet');
		$field->addOption('noodp');
		$field->addOption('noydir');
		$field->value = $data['robots'];
		$fields->add($field);
		
		
		
		$field = $modules->get("InputfieldCheckbox");
		$field->name = "includeGenerator";
		$field->label = __("Include Generator?");
		$field->description = "";
		$field->checked = $data['includeGenerator'];
		$fields->add($field);
		
		$field = $modules->get("InputfieldCheckbox");
		$field->name = "includeOpenGraph";
		$field->label = __("Include Open Graph?");
		$field->description = "";
		$field->checked = $data['includeOpenGraph'];
		$fields->add($field);
		
		
		
		$field = $modules->get("InputfieldCheckbox");
		$field->name = "useParents";
		$field->label = __("Use parent's values as default?");
		$field->description = "Parent's values will be used as default if you don't define page specific meta data and leave the fields above blank and don't choose smart fields.";
		$field->checked = $data['useParents'];
		$fields->add($field);
		

		/*
		$field = $modules->get("InputfieldCheckbox");
		$field->name = "usePermission";
		$field->label = __("Only user with 'page-seo' permission can see/edit the tab?");
		$field->description = "";
		$field->checked = $data['usePermission'];
		$fields->add($field);
		*/
		
		$selectTemplates = wire('templates');
		$field = $modules->get("InputfieldAsmSelect");
		$field->name = "excludedTemplates";
		$field->label = __("Exclude Templates");
		$field->description = "Chosse the templates which shouldn't have a seo tab";
		foreach($selectTemplates as $selectTemplate) $field->addOption($selectTemplate->name);
		$field->value = $data['excludedTemplates'];
		$fields->add($field);
		



		$field = $modules->get("InputfieldRadios");
		$field->name = "method";
		$field->label = __("Method");
		$field->description = "Do you want to get the generated code included automatically or use hooks in your template files?";
		$field->addOption('auto', __('Automatically'));
		$field->addOption('manual', __('Manually'));
		$field->value = $data['method'];
		$fields->add($field);
		
	
	
		$field = $modules->get("InputfieldText");
		$field->name = "googleAnalytics";
		$field->label = __("Google Analytics Code");
		$field->description = "Google Analytics code will be embedded if this field is populated.";
		$field->notes = 'How to find your code: https://support.google.com/analytics/answer/1008080. It should look like: UA-XXXXXXX-X.';
		$field->value = $data['googleAnalytics'];
		$fields->add($field);

		
		$field = $modules->get("InputfieldMarkup");
		$field->label = __("Recommendations");
		$string = __('For an even better SEO experience there are a couple of other modules I can recommend:');
		$field->value = '<p>'.$string.'</p>
						<ul>
							<li><a target="_blank" href="http://modules.processwire.com/modules/markup-sitemap-xml/">Sitemap</a> (MarkupSitemapXML)</li>
							<li><a target="_blank" href="http://modules.processwire.com/modules/page-path-history/">Page Path History</a> (PagePathHistory)</li>
							<li><a target="_blank" href="http://modules.processwire.com/modules/search-engine-referrer-tracker/">Search Engine Referrer Tracker</a> (SearchEngineReferrerTracker)</li>
							<li><a target="_blank" href="http://modules.processwire.com/modules/process-redirects/">Redirects</a> (ProcessRedirects)</li>
							<li><a target="_blank" href="http://modules.processwire.com/modules/all-in-one-minify/">AIOM+</a> (AllInOneMinify)</li>
						</ul>';
		
		$fields->add($field);
		
		
	
		return $fields;
	}
}
